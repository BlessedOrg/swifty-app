// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id              String            @id @default(cuid())
  email           String?           @unique
  walletAddr      String
  isAbstracted    Boolean           @default(false)
  createdAt       DateTime          @default(now())
  updatedAt       DateTime          @updatedAt
  Deposit         Deposit[]
  Withdraw        Withdraw[]
  TicketMint      TicketMint[]
  TicketSale      TicketSale[]
  SaleParticipant SaleParticipant[]
  Log             Log[]
  Address         Address[]
  Notification    Notification[]
  userToken       UserToken?
}

model Deposit {
  id            String   @id @default(cuid())
  amount        Int
  transactionId String
  walletAddress String
  user          User     @relation(fields: [userId], references: [id])
  userId        String
  gasWeiPrice   String
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
}

model UserToken {
  id     String @id @default(cuid())
  token  String @unique
  userId String @unique
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Withdraw {
  id            String   @id @default(cuid())
  amount        Int
  transactionId String
  walletAddress String
  user          User     @relation(fields: [userId], references: [id])
  userId        String
  gasWeiPrice   String
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
}

model TicketMint {
  id            String     @id @default(cuid())
  txHash        String
  tokenId       String
  contractAddr  String
  walletAddress String
  user          User       @relation(fields: [userId], references: [id])
  userId        String
  ticketSaleId  String
  ticketSale    TicketSale @relation(fields: [ticketSaleId], references: [id], onDelete: Cascade)
  gasWeiPrice   String
  createdAt     DateTime   @default(now())
  updatedAt     DateTime   @updatedAt
}

model TicketSale {
  id                          String            @id @default(cuid())
  title                       String
  subtitle                    String?
  lotteryV1contractAddr       String?
  lotteryV2contractAddr       String?
  auctionV1contractAddr       String?
  auctionV2contractAddr       String?
  lotteryV1nftAddr            String?
  lotteryV2nftAddr            String?
  auctionV1nftAddr            String?
  auctionV2nftAddr            String?
  lotteryV1settings           Json?
  lotteryV2settings           Json?
  auctionV1settings           Json?
  auctionV2settings           Json?
  factoryContractAddr         String?
  factoryContractCurrentIndex Int?
  description                 String?
  coverUrl                    String?
  priceCents                  Int?
  currency                    String?           @default("USD")
  priceIncrease               Int?
  cooldownTimeSeconds         Int?
  timezoneIdentifier          String?
  type                        TicketType?
  category                    EventCategory?
  seller                      User              @relation(fields: [sellerId], references: [id])
  sellerId                    String
  startsAt                    DateTime?
  finishAt                    DateTime?
  saleStart                   DateTime?
  SaleParticipant             SaleParticipant[]
  speakers                    Speaker[]
  hosts                       Json?
  eventLocation               EventLocation?    @relation(fields: [eventLocationId], references: [id], onDelete: Cascade)
  eventLocationId             String?
  imagesGallery               Json?
  sliderSettings              Json?
  ticketMints                 TicketMint[]
  usable                      Boolean           @default(false)
  checks                      Json?
  createdAt                   DateTime          @default(now())
  updatedAt                   DateTime          @updatedAt
}

model Speaker {
  id          String       @id @default(cuid())
  avatarUrl   String?
  name        String
  company     String?
  position    String?
  url         String?
  ticketSales TicketSale[]
}

enum EventCategory {
  concert
  conference
  event
}

enum TicketType {
  free
  paid
}

enum Stage {
  LOTTERY_V1
  LOTTERY_V2
  AUCTION_V1
  AUCTION_V2
}

model SaleParticipant {
  id           String     @id @default(cuid())
  user         User       @relation(fields: [userId], references: [id])
  userId       String
  ticketSale   TicketSale @relation(fields: [ticketSaleId], references: [id])
  ticketSaleId String
  randomNumber Int?
  stage        Stage?     @default(LOTTERY_V1)
  winner       Boolean    @default(false)
  createdAt    DateTime   @default(now())
  updatedAt    DateTime   @updatedAt
}

model Log {
  id        String   @id @default(cuid())
  user      User     @relation(fields: [userId], references: [id])
  userId    String
  type      LogType
  payload   Json
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

enum LogType {
  mintSuccess
  mintFailure
  withdrawSuccess
  withdrawFailure
  depositSuccess
  depositFailure
  userRegistrationSuccess
  userRegistrationFailure
  ticketSaleCreationSuccess
  ticketSaleCreationFailure
  gasSaved
}

model EventLocation {
  id               String       @id @default(cuid())
  street1stLine    String?
  street2ndLine    String?
  postalCode       String?
  city             String
  countryCode      String?
  country          String
  locationDetails  String?
  ticketSales      TicketSale[]
  continent        String?
  stateCode        String?
  countryLatitude  String?
  countryLongitude String?
  cityLatitude     String?
  cityLongitude    String?
  countryFlag      String?
  createdAt        DateTime     @default(now())
  updatedAt        DateTime     @updatedAt
}

model Address {
  id            String   @id @default(cuid())
  user          User     @relation(fields: [userId], references: [id])
  userId        String
  street1stLine String?
  street2ndLine String?
  postalCode    String?
  city          String
  countryCode   String?
  country       String
  phoneNumber   Int?
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
}

model Notification {
  id        String   @id @default(cuid())
  content   String
  user      User     @relation(fields: [userId], references: [id])
  userId    String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}
